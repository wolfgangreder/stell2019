Disassembly Listing for bootloader
Generated From:
/home/reder/projects/stell2019/tools/bootloader.X/dist/default/debug/bootloader.X.debug.elf
23.08.2019 15:30:56

---  /home/reder/projects/stell2019/tools/bootloader.X/source/boot.c  -----------------------------------
1:             /*
2:              * Copyright 2019 Wolfgang Reder.
3:              *
4:              * Licensed under the Apache License, Version 2.0 (the "License");
5:              * you may not use this file except in compliance with the License.
6:              * You may obtain a copy of the License at
7:              *
8:              *      http://www.apache.org/licenses/LICENSE-2.0
9:              *
10:             * Unless required by applicable law or agreed to in writing, software
11:             * distributed under the License is distributed on an "AS IS" BASIS,
12:             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13:             * See the License for the specific language governing permissions and
14:             * limitations under the License.
15:             */
16:            #define F_CPU_RESET                 (20E6/6)
17:            
18:            #include <avr/io.h>
19:            #include <string.h>
20:            #include "types.h"
21:            #include "bootloader.h"
22:            #include "e2mem.h"
23:            /* Memory configuration
24:             * BOOTEND_FUSE * 256 must be above Bootloader Program Memory Usage,
25:             * this is 490 bytes at optimization level -O3, so BOOTEND_FUSE = 0x02
26:             */
27:            #define BOOTEND_FUSE                (0x01)
28:            #define BOOT_SIZE                   (BOOTEND_FUSE * 0x100)
29:            #define MAPPED_APPLICATION_START    (MAPPED_PROGMEM_START + BOOT_SIZE)
30:            #define MAPPED_APPLICATION_SIZE     (MAPPED_PROGMEM_SIZE - BOOT_SIZE)
31:            
32:            /* Fuse configuration
33:             * BOOTEND sets the size (end) of the boot section in blocks of 256 bytes.
34:             * APPEND = 0x00 defines the section from BOOTEND*256 to end of Flash as application code.
35:             * Remaining fuses have default configuration.
36:             */
37:            FUSES = {
38:            	.OSCCFG = FREQSEL_20MHZ_gc,
39:            	.SYSCFG0 = CRCSRC_NOCRC_gc | RSTPINCFG_UPDI_gc,
40:            	.SYSCFG1 = SUT_64MS_gc,
41:            	.APPEND = 0x00,
42:            	.BOOTEND = BOOTEND_FUSE
43:            };
44:            
45:            
46:            bool bootloaderRequired EEMEM = true;
47:            
48:            /* Define application pointer type */
49:            typedef void (*const app_t) (void);
50:            
51:            /* Interface function prototypes */
52:            static bool is_bootloader_requested(void);
53:            static void init_twi(void);
54:            static void updateflash();
55:            static bool page_load(update_rec*);
56:            static void page_write(update_rec*);
57:            
58:            /*
59:             * Main boot function
60:             * Put in the constructors section (.ctors) to save Flash.
61:             * Naked attribute used since function prologue and epilogue is unused
62:             */
63:            __attribute__((naked)) __attribute__((section(".ctors"))) void
64:            boot(void)
65:            {
66:            	/* Initialize system for AVR GCC support, expects r1 = 0 */
67:            	asm volatile("clr r1");
0000  2411     EOR R1, R1
68:            	// Init Stack !
69:            	SP = RAMEND;
0001  E38D     LDI R24, 0x3D
0002  E090     LDI R25, 0x00
0003  EF2F     LDI R18, 0xFF
0004  E33F     LDI R19, 0x3F
0005  01FC     MOVW R30, R24
0006  8320     ST Z, R18
0007  8331     STD Z+1, R19
70:            
71:            	//	if (!is_bootloader_requested()) {
72:            	//		app_t app = (app_t) (BOOT_SIZE / sizeof(app_t));
73:            	//		app();
74:            	//	} else {
75:            	init_twi();
0008  D024     RCALL init_twi
76:            	updateflash();
0009  D00E     RCALL updateflash
77:            	//	}
78:            	//	/* Issue system reset */
79:            	_PROTECTED_WRITE(RSTCTRL.SWRR, RSTCTRL_SWRE_bm);
000A  ED88     LDI R24, 0xD8
000B  E091     LDI R25, 0x01
000C  BF84     OUT 0x34, R24
000D  9390     STS 0x00, R25
80:            }
000F  0000     NOP
81:            
82:            static update_rec page_buffer;
83:            
84:            static void updateflash()
85:            {
0018  93CF     PUSH R28
0019  93DF     PUSH R29
001A  B7CD     IN R28, 0x3D
001B  B7DE     IN R29, 0x3E
86:            	memset(&page_buffer, 0, sizeof(page_buffer));
001C  E443     LDI R20, 0x43
001D  E050     LDI R21, 0x00
001E  E060     LDI R22, 0x00
001F  E070     LDI R23, 0x00
0020  E080     LDI R24, 0x00
0021  E39E     LDI R25, 0x3E
0022  D048     RCALL memset
87:            	while (1) {
88:            		while (page_load(&page_buffer)) {
0023  C003     RJMP 0x27
0027  E080     LDI R24, 0x00
0028  E39E     LDI R25, 0x3E
0029  D00B     RCALL page_load
002A  2388     AND R24, R24
002B  F7C1     BRNE 0x24
89:            			page_write(&page_buffer);
0024  E080     LDI R24, 0x00
0025  E39E     LDI R25, 0x3E
0026  D032     RCALL page_write
90:            		}
91:            	}
002C  CFF6     RJMP 0x23
92:            }
93:            
94:            /*
95:             * Boot access request function
96:             */
97:            static bool is_bootloader_requested(void)
98:            {
99:            	return true;
100:           	//if (*(&bootloaderRequired + MAPPED_EEPROM_START) == 0) {
101:           	//	if (e2mem_read_uint8(&bootloaderRequired) == 0) { // no forced update requested, check crc
102:           	//		CRCSCAN.CTRLB = 0; //Priority on Flash; Scan entire Flash
103:           	//
104:           	//		CRCSCAN.CTRLA = 1 << CRCSCAN_ENABLE_bp /* Enable CRC scan: enabled */
105:           	//			| 0 << CRCSCAN_NMIEN_bp;
106:           	//		return !(CRCSCAN_STATUS & CRCSCAN_OK_bm);
107:           	//	}
108:           	//	return true;
109:           }
110:           
111:           /*
112:            * Communication interface functions
113:            */
114:           static void
115:           init_twi(void)
116:           {
002D  93CF     PUSH R28
002E  93DF     PUSH R29
002F  B7CD     IN R28, 0x3D
0030  B7DE     IN R29, 0x3E
117:           	/* Switch pins to alternate TWI pin location */
118:           	//	PORTMUX.CTRLB |= PORTMUX_TWI0_ALTERNATE_gc;
119:           
120:           	/* Enable TWI driver */
121:           	//	i2c_slave_init();
122:           }
0031  0000     NOP
0032  91DF     POP R29
0033  91CF     POP R28
0034  9508     RET
123:           
124:           static bool
125:           page_load(update_rec* page_buffer)
126:           {
0035  93CF     PUSH R28
0036  93DF     PUSH R29
0037  D000     RCALL 0x38
0038  B7CD     IN R28, 0x3D
0039  B7DE     IN R29, 0x3E
003A  8389     STD Y+1, R24
003B  839A     STD Y+2, R25
127:           	if (page_buffer->adress == 0xff) {
003C  8189     LDD R24, Y+1
003D  819A     LDD R25, Y+2
003E  01FC     MOVW R30, R24
003F  8180     LD R24, Z
0040  3F8F     CPI R24, 0xFF
0041  F411     BRNE 0x44
128:           		return false;
0042  E080     LDI R24, 0x00
0043  C010     RJMP 0x54
129:           	}
130:           	page_buffer->adress = 0x1f;
0044  8189     LDD R24, Y+1
0045  819A     LDD R25, Y+2
0046  E12F     LDI R18, 0x1F
0047  01FC     MOVW R30, R24
0048  8320     ST Z, R18
131:           	page_buffer->crc8 = 0x2f;
0049  8189     LDD R24, Y+1
004A  819A     LDD R25, Y+2
004B  E22F     LDI R18, 0x2F
004C  01FC     MOVW R30, R24
004D  8322     STD Z+2, R18
132:           	page_buffer->dataSize = 64;
004E  8189     LDD R24, Y+1
004F  819A     LDD R25, Y+2
0050  E420     LDI R18, 0x40
0051  01FC     MOVW R30, R24
0052  8321     STD Z+1, R18
133:           	return true;
0053  E081     LDI R24, 0x01
134:           }
0054  900F     POP R0
0055  900F     POP R0
0056  91DF     POP R29
0057  91CF     POP R28
0058  9508     RET
135:           
136:           static void
137:           page_write(update_rec* page_buffer)
138:           {
0059  93CF     PUSH R28
005A  93DF     PUSH R29
005B  D000     RCALL 0x5C
005C  B7CD     IN R28, 0x3D
005D  B7DE     IN R29, 0x3E
005E  8389     STD Y+1, R24
005F  839A     STD Y+2, R25
139:           	page_buffer->adress = 0xff;
0060  8189     LDD R24, Y+1
0061  819A     LDD R25, Y+2
0062  EF2F     LDI R18, 0xFF
0063  01FC     MOVW R30, R24
0064  8320     ST Z, R18
140:           	//	uint8_t *app_ptr = (uint8_t *)MAPPED_APPLICATION_START;
141:           	//	while(app_ptr - MAPPED_PROGMEM_START <= (uint8_t *)PROGMEM_END) {
142:           	//		/* Receive and echo data before loading to memory */
143:           	//		uint8_t rx_data = twi_receive();
144:           	//		twi_send(rx_data);
145:           	//
146:           	//		/* Incremental load to page buffer before writing to Flash */
147:           	//		*app_ptr = rx_data;
148:           	//		app_ptr++;
149:           	//		if(!((uint16_t)app_ptr % MAPPED_PROGMEM_PAGE_SIZE)) {
150:           	//			/* Page boundary reached, Commit page to Flash */
151:           	//			_PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);
152:           	//			while(NVMCTRL.STATUS & NVMCTRL_FBUSY_bm);
153:           	//
154:           	//			toggle_status_led();
155:           	//		}
156:           	//	}
157:           	//
158:           }
0065  0000     NOP
0066  900F     POP R0
0067  900F     POP R0
0068  91DF     POP R29
0069  91CF     POP R28
006A  9508     RET
