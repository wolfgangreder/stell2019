/*
 * Copyright 2019 Wolfgang Reder.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package at.or.reder.rpi;

import at.or.reder.dcc.LinkState;
import at.or.reder.dcc.PowerEvent;
import at.or.reder.dcc.PowerEventListener;
import at.or.reder.dcc.PowerMode;
import at.or.reder.dcc.PowerPort;
import java.awt.Color;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import org.openide.util.Exceptions;

/**
 *
 * @author Wolfgang Reder
 */
public class PowerControlPanel extends DevicePanel
{

  private final PowerEventListener powerListener = this::onPowerEvent;
  private boolean listenerConnected;
  private volatile PowerPort port;
  private final Color red = new Color(0xcc0000);
  private final Color blue = new Color(0x0000cc);
  private final Color gray = new Color(0xcccccc);
  private final Color green = new Color(0x00cc00);
  private PowerMode powerMode;

  public PowerControlPanel()
  {
    initComponents();
    assignPowerState(PowerMode.ON);
  }

  @Override
  protected void doLinkStateChanged(LinkState linkState)
  {
    setControlState();
  }

  private void onPowerEvent(PowerEvent event)
  {
    if (event.getPort() == port) {
      SwingUtilities.invokeLater(() -> assignPowerState(event.getMode()));
    }
  }

  private void setControlState()
  {
    assignPowerState(powerMode);
  }

  private void enableButton(JButton button,
                            boolean enable,
                            Color colorEn,
                            Color colorDis)
  {
    boolean e = enable && device != null && device.getLinkState() == LinkState.CONNECTED;
    button.setEnabled(e);
    if (e) {
      button.setBackground(colorEn);
    } else {
      button.setBackground(colorDis);
    }
  }

  private void assignPowerState(PowerMode mode)
  {
    this.powerMode = mode;
    enableButton(btOff,
                 mode != PowerMode.OFF,
                 red,
                 gray);
    enableButton(btSSPEm,
                 mode != PowerMode.SSPEM && mode != PowerMode.SSPF0,
                 blue,
                 gray);
    enableButton(btSSPF0,
                 mode != PowerMode.SSPEM && mode != PowerMode.SSPF0,
                 blue,
                 gray);
    enableButton(btOn,
                 mode != PowerMode.ON,
                 green,
                 gray);
  }

  private void setPowerMode(PowerMode mode)
  {
    if (device != null) {
      try {
        device.setPowerMode(port,
                            mode);
      } catch (IOException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }

  public PowerPort getPort()
  {
    return port;
  }

  public void setPort(PowerPort port)
  {
    this.port = port;
  }

  @Override
  protected void connectListener()
  {
    if (device != null && !listenerConnected) {
      device.addPowerEventListener(powerListener);
      listenerConnected = true;
    }
    setControlState();
  }

  @Override
  protected void disconnectListener()
  {
    if (listenerConnected) {
      if (device != null) {
        device.removePowerEventListener(powerListener);
      }
      listenerConnected = false;
    }
    setControlState();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
   * this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings(
          "unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    setLayout(new java.awt.GridLayout(0, 1, 0, 5));

    btOff.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
    btOff.setForeground(new java.awt.Color(255, 255, 255));
    btOff.setText(org.openide.util.NbBundle.getMessage(PowerControlPanel.class, "PowerControlPanel.btOff.text")); // NOI18N
    btOff.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btOffActionPerformed(evt);
      }
    });
    add(btOff);

    btSSPEm.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
    btSSPEm.setForeground(new java.awt.Color(238, 238, 238));
    btSSPEm.setText(org.openide.util.NbBundle.getMessage(PowerControlPanel.class, "PowerControlPanel.btSSPEm.text")); // NOI18N
    btSSPEm.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btSSPEmActionPerformed(evt);
      }
    });
    add(btSSPEm);

    btSSPF0.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
    btSSPF0.setForeground(new java.awt.Color(238, 238, 238));
    btSSPF0.setText(org.openide.util.NbBundle.getMessage(PowerControlPanel.class, "PowerControlPanel.btSSPF0.text")); // NOI18N
    btSSPF0.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btSSPF0ActionPerformed(evt);
      }
    });
    add(btSSPF0);

    btOn.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
    btOn.setText(org.openide.util.NbBundle.getMessage(PowerControlPanel.class, "PowerControlPanel.btOn.text")); // NOI18N
    btOn.setEnabled(false);
    btOn.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btOnActionPerformed(evt);
      }
    });
    add(btOn);
  }// </editor-fold>//GEN-END:initComponents

  private void btOffActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btOffActionPerformed
  {//GEN-HEADEREND:event_btOffActionPerformed
    setPowerMode(PowerMode.OFF);
  }//GEN-LAST:event_btOffActionPerformed

  private void btSSPEmActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btSSPEmActionPerformed
  {//GEN-HEADEREND:event_btSSPEmActionPerformed
    setPowerMode(PowerMode.SSPEM);
  }//GEN-LAST:event_btSSPEmActionPerformed

  private void btSSPF0ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btSSPF0ActionPerformed
  {//GEN-HEADEREND:event_btSSPF0ActionPerformed
    setPowerMode(PowerMode.SSPF0);
  }//GEN-LAST:event_btSSPF0ActionPerformed

  private void btOnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btOnActionPerformed
  {//GEN-HEADEREND:event_btOnActionPerformed
    setPowerMode(PowerMode.ON);
  }//GEN-LAST:event_btOnActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private final javax.swing.JButton btOff = new javax.swing.JButton();
  private final javax.swing.JButton btOn = new javax.swing.JButton();
  private final javax.swing.JButton btSSPEm = new javax.swing.JButton();
  private final javax.swing.JButton btSSPF0 = new javax.swing.JButton();
  // End of variables declaration//GEN-END:variables
}
